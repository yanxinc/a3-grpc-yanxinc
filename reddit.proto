syntax = "proto3";

message User{
    string userID = 1;
}

message Post{
    enum State {
        NORMAL = 0;
        LOCKED = 1;
        HIDDEN = 2;
    }
    string title = 1;
    string text = 2;
    oneof media {
        string video_url = 3;
        string image_url = 4;
    }
    User author = 5;
    int32 score = 6;
    State state = 7;
    string publication_date = 8;
}

message Comment{
    enum CommentState {
        NORMAL = 0;
        HIDDEN = 1;
    }
    int32 id = 1;
    oneof parent {
        int32 comment_id = 2;
        int32 post_id = 3;
    }
    User author = 4; 
    string text = 5;
    int32 score = 6;
    CommentState state = 7;
    string publication_date = 8; 
    bool has_replies = 9;
}

enum VoteType {
    UPVOTE = 0;
    DOWNVOTE = 1;
}

message CreatePostRequest{
    string title = 1;
    string text = 2;
    oneof media {
        string video_url = 3;
        string image_url = 4;
    }
    optional User author = 5;
}

message CreatePostResponse{
    int32 post_id = 1;
    Post post = 2;
}

message VotePostRequest{
    int32 post_id = 1;
    VoteType vote_type = 2;
}

message VotePostResponse {
    int32 score = 1;
}

message GetPostRequest{
    int32 post_id = 1;
}

message GetPostResponse{
    Post post = 1;
}

message CreateCommentRequest{
    oneof parent {
        int32 comment_id = 1;
        int32 post_id = 2;
    }
    User author = 3; 
    string text = 4;
}

message CreateCommentResponse{
    int32 comment_id = 1;
    Comment comment = 2;
}

message VoteCommentRequest{
    int32 comment_id = 1;
    VoteType vote_type = 2;
}

message VoteCommentResponse{
    int32 score = 1;
}

message GetTopCommentsRequest{
    int32 N = 1;
    int32 post_id = 2;
}

message GetTopCommentsResponse{
    repeated Comment comments = 1;
}

message ExpandCommentBranchRequest{
    int32 N = 1;
    int32 comment_id = 2;
}

message CommentWithReplies {
    Comment comment = 1;
    repeated Comment top_replies = 2;
}

message ExpandCommentBranchResponse {
    repeated CommentWithReplies comments = 1;    
}

service RedditService {
    // Create a Post
    rpc CreatePost (CreatePostRequest) returns (CreatePostResponse);

    // Upvote or Downvote a Post
    rpc VotePost (VotePostRequest) returns (VotePostResponse);

    // Retrieve Post Content
    rpc GetPost (GetPostRequest) returns (GetPostResponse);

    // Create a Comment
    rpc CreateComment (CreateCommentRequest) returns (CreateCommentResponse);

    // Upvote or Downvote a Comment
    rpc VoteComment (VoteCommentRequest) returns (VoteCommentResponse);

    // Retrieving N Most Upvoted Comments Under a Post
    rpc GetTopComments (GetTopCommentsRequest) returns (GetTopCommentsResponse);

    // Expand a Comment Branch
    rpc ExpandCommentBranch (ExpandCommentBranchRequest) returns (ExpandCommentBranchResponse);

}